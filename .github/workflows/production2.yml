name: Deploy Production 2 Social

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

jobs:
  # Build job
  build-and-deploy:
    runs-on: [self-hosted, production-2]
    environment: production
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL_IP }}
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_IP }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL_IP }}
      NEXT_PUBLIC_BUCKET_API_KEY: ${{ secrets.NEXT_PUBLIC_BUCKET_API_KEY }}
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
      DO_ACCESS_KEY: ${{ secrets.DO_ACCESS_KEY }}
      DO_SECRET_KEY: ${{ secrets.DO_SECRET_KEY }}
      DO_REGION: ${{ secrets.DO_REGION }}
      DO_ORIGIN_ENDPOINT: ${{ secrets.DO_ORIGIN_ENDPOINT }}
      DO_BUCKET_NAME: ${{ secrets.DO_BUCKET_NAME }}
      REDIS_URL: ${{ secrets.REDIS_URL_IP }}
      WS_PORT: ${{ secrets.WS_PORT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Remove yarn.lock
        run: rm -f yarn.lock
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} build
      - name: Set environment variables for PM2
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> .env
          echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_IP }} >> .env
          echo NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_IP }} >> .env
          echo SMTP_HOST=${{ secrets.SMTP_HOST }} >> .env
          echo SMTP_PORT=${{ secrets.SMTP_PORT }} >> .env
          echo SMTP_USER=${{ secrets.SMTP_USER }} >> .env
          echo SMTP_PASS=${{ secrets.SMTP_PASS }} >> .env
          echo NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL_IP }} >> .env
          echo NEXT_PUBLIC_BUCKET_API_KEY=${{ secrets.NEXT_PUBLIC_BUCKET_API_KEY }} >> .env
          echo GIT_ACCESS_TOKEN=${{ secrets.GIT_ACCESS_TOKEN }} >> .env
          echo REDIS_URL=${{ secrets.REDIS_URL_IP }} >> .env
          echo WS_PORT=${{ secrets.WS_PORT }} >> .env
          echo DO_ACCESS_KEY=${{ secrets.DO_ACCESS_KEY }} >> .env
          echo DO_SECRET_KEY=${{ secrets.DO_SECRET_KEY }} >> .env
          echo DO_REGION=${{ secrets.DO_REGION }} >> .env
          echo DO_ORIGIN_ENDPOINT=${{ secrets.DO_ORIGIN_ENDPOINT }} >> .env
          echo DO_BUCKET_NAME=${{ secrets.DO_BUCKET_NAME }} >> .env
      - name: Restart pm2
        run: pm2 restart pm2.config.json